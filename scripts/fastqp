#!/usr/bin/python

from __future__ import division
import os
import sys
import argparse
import itertools
import random
import fastqp

def run(args):
    """ read FASTQ or SAM and tabulate basic metrics """
    n = args.sample
    
    with fastqp.reader(args.input) as infile, fastqp.stats() as stats:
        if args.verbose:
            report_count = 10000
            report_times = 1
        while infile:
            k = random.choice(xrange(n))
            read = infile.subsample(n, k)
            if read:
                stats.evaluate(read)
                if not args.nokmer:
                    stats.kmercount(read, args.kmer)
            else:
                break
            if args.verbose:
                if stats.depth[1] / report_count > report_times:
                    sys.stderr.write("processed {0:.2E} reads\n".format(stats.depth[1]))
                    report_times += 1
        stats.summarize(filename=args.output, figures=args.figures)
        
def main():
    parser = argparse.ArgumentParser(prog='fastqp', description="simple NGS read quality assessment using Python")
    parser.add_argument('input', type=str, help="input file (FASTQ or SAM)")
    parser.add_argument('-v', '--verbose', action="store_true", default=False, help="verbose output")
    parser.add_argument('-s', '--sample', type=int, default=100, help='number of reads to sample from')
    parser.add_argument('-k', '--kmer', type=int, default=5, choices=range(2, 11), help='length of kmer for over-repesented kmer counts')
    parser.add_argument('-o', '--output', type=str, help="base name for output files")
    parser.add_argument('-f', '--figures', action="store_true", default=False, help="produce figures")
    parser.add_argument('--nokmer', action="store_true", default=False, help="do not count kmers")
    
    args = parser.parse_args()
    run(args)

if __name__ == "__main__": 
    main()
